// generated 2004/5/3 18:38:16 CEST by christof@puck.petig-baender.de
// using glademm V2.5.0
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- newtree.glade
// for gtk 2.4.0 and gtkmm 2.4.0
//
// Please modify the corresponding derived classes in ././window1.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
#include <gtkmmconfig.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#include <sigc++/compatibility.h>
#endif //gtkmm 2.3+
#include "window1_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/image.h>
#include <gtkmm/label.h>
#include <gtkmm/box.h>
#include <gtkmm/alignment.h>
#include <gtkmm/button.h>
#include <gtkmm/buttonbox.h>

window1_glade::window1_glade(
) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{  window1 = this;
   gmm_data = new GlademmData(get_accel_group());
   scrolledwindow1 = Gtk::manage(new class Gtk::ScrolledWindow());
   
   Gtk::Image *image1 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-add"), Gtk::IconSize(4)));
   Gtk::Label *label1 = Gtk::manage(new class Gtk::Label("Dazu"));
   Gtk::HBox *hbox1 = Gtk::manage(new class Gtk::HBox(false, 2));
   Gtk::Alignment *alignment1 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 0, 0));
   Gtk::Button *button1 = Gtk::manage(new class Gtk::Button());
   Gtk::Image *image4 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-delete"), Gtk::IconSize(4)));
   Gtk::Label *label4 = Gtk::manage(new class Gtk::Label("Weg"));
   Gtk::HBox *hbox4 = Gtk::manage(new class Gtk::HBox(false, 2));
   Gtk::Alignment *alignment4 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 0, 0));
   Gtk::Button *button2 = Gtk::manage(new class Gtk::Button());
   Gtk::Image *image3 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-refresh"), Gtk::IconSize(4)));
   Gtk::Label *label3 = Gtk::manage(new class Gtk::Label("refresh"));
   Gtk::HBox *hbox3 = Gtk::manage(new class Gtk::HBox(false, 2));
   Gtk::Alignment *alignment3 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 0, 0));
   Gtk::Button *button3 = Gtk::manage(new class Gtk::Button());
   Gtk::Image *image6 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-execute"), Gtk::IconSize(4)));
   Gtk::Label *label6 = Gtk::manage(new class Gtk::Label("viel ändern"));
   Gtk::HBox *hbox6 = Gtk::manage(new class Gtk::HBox(false, 2));
   Gtk::Alignment *alignment6 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 0, 0));
   Gtk::Button *button4 = Gtk::manage(new class Gtk::Button());
   Gtk::Image *image5 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-execute"), Gtk::IconSize(4)));
   Gtk::Label *label5 = Gtk::manage(new class Gtk::Label("wenig ändern"));
   Gtk::HBox *hbox5 = Gtk::manage(new class Gtk::HBox(false, 2));
   Gtk::Alignment *alignment5 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 0, 0));
   Gtk::Button *button5 = Gtk::manage(new class Gtk::Button());
   Gtk::HButtonBox *hbuttonbox1 = Gtk::manage(new class Gtk::HButtonBox(Gtk::BUTTONBOX_DEFAULT_STYLE, 4));
   Gtk::VBox *vbox1 = Gtk::manage(new class Gtk::VBox(false, 0));
   scrolledwindow1->set_flags(Gtk::CAN_FOCUS);
   scrolledwindow1->set_shadow_type(Gtk::SHADOW_NONE);
   scrolledwindow1->set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
   scrolledwindow1->property_window_placement().set_value(Gtk::CORNER_BOTTOM_RIGHT);
   image1->set_alignment(0.5,0.5);
   image1->set_padding(0,0);
   label1->set_alignment(0.5,0.5);
   label1->set_padding(0,0);
   label1->set_justify(Gtk::JUSTIFY_LEFT);
   label1->set_line_wrap(false);
   label1->set_use_markup(false);
   label1->set_selectable(false);
   hbox1->pack_start(*image1, Gtk::PACK_SHRINK, 0);
   hbox1->pack_start(*label1, Gtk::PACK_SHRINK, 0);
   alignment1->add(*hbox1);
   button1->set_flags(Gtk::CAN_FOCUS);
   button1->set_flags(Gtk::CAN_DEFAULT);
   button1->set_relief(Gtk::RELIEF_NORMAL);
   button1->add(*alignment1);
   image4->set_alignment(0.5,0.5);
   image4->set_padding(0,0);
   label4->set_alignment(0.5,0.5);
   label4->set_padding(0,0);
   label4->set_justify(Gtk::JUSTIFY_LEFT);
   label4->set_line_wrap(false);
   label4->set_use_markup(false);
   label4->set_selectable(false);
   hbox4->pack_start(*image4, Gtk::PACK_SHRINK, 0);
   hbox4->pack_start(*label4, Gtk::PACK_SHRINK, 0);
   alignment4->add(*hbox4);
   button2->set_flags(Gtk::CAN_FOCUS);
   button2->set_flags(Gtk::CAN_DEFAULT);
   button2->set_relief(Gtk::RELIEF_HALF);
   button2->add(*alignment4);
   image3->set_alignment(0.5,0.5);
   image3->set_padding(0,0);
   label3->set_alignment(0.5,0.5);
   label3->set_padding(0,0);
   label3->set_justify(Gtk::JUSTIFY_LEFT);
   label3->set_line_wrap(false);
   label3->set_use_markup(false);
   label3->set_selectable(false);
   hbox3->pack_start(*image3, Gtk::PACK_SHRINK, 0);
   hbox3->pack_start(*label3, Gtk::PACK_SHRINK, 0);
   alignment3->add(*hbox3);
   button3->set_flags(Gtk::CAN_FOCUS);
   button3->set_flags(Gtk::CAN_DEFAULT);
   button3->set_relief(Gtk::RELIEF_NORMAL);
   button3->add(*alignment3);
   image6->set_alignment(0.5,0.5);
   image6->set_padding(0,0);
   label6->set_alignment(0.5,0.5);
   label6->set_padding(0,0);
   label6->set_justify(Gtk::JUSTIFY_LEFT);
   label6->set_line_wrap(false);
   label6->set_use_markup(false);
   label6->set_selectable(false);
   hbox6->pack_start(*image6, Gtk::PACK_SHRINK, 0);
   hbox6->pack_start(*label6, Gtk::PACK_SHRINK, 0);
   alignment6->add(*hbox6);
   button4->set_flags(Gtk::CAN_FOCUS);
   button4->set_flags(Gtk::CAN_DEFAULT);
   button4->set_relief(Gtk::RELIEF_NORMAL);
   button4->add(*alignment6);
   image5->set_alignment(0.5,0.5);
   image5->set_padding(0,0);
   label5->set_alignment(0.5,0.5);
   label5->set_padding(0,0);
   label5->set_justify(Gtk::JUSTIFY_LEFT);
   label5->set_line_wrap(false);
   label5->set_use_markup(false);
   label5->set_selectable(false);
   hbox5->pack_start(*image5, Gtk::PACK_SHRINK, 0);
   hbox5->pack_start(*label5, Gtk::PACK_SHRINK, 0);
   alignment5->add(*hbox5);
   button5->set_flags(Gtk::CAN_FOCUS);
   button5->set_flags(Gtk::CAN_DEFAULT);
   button5->set_relief(Gtk::RELIEF_NORMAL);
   button5->add(*alignment5);
   hbuttonbox1->pack_start(*button1);
   hbuttonbox1->pack_start(*button2);
   hbuttonbox1->pack_start(*button3);
   hbuttonbox1->pack_start(*button4);
   hbuttonbox1->pack_start(*button5);
   vbox1->pack_start(*scrolledwindow1);
   vbox1->pack_start(*hbuttonbox1, Gtk::PACK_SHRINK, 0);
   window1->set_title("window1");
   window1->set_default_size(600,400);
   window1->set_modal(false);
   window1->property_window_position().set_value(Gtk::WIN_POS_NONE);
   window1->set_resizable(true);
   window1->property_destroy_with_parent().set_value(false);
   window1->add(*vbox1);
   scrolledwindow1->show();
   image1->show();
   label1->show();
   hbox1->show();
   alignment1->show();
   button1->show();
   image4->show();
   label4->show();
   hbox4->show();
   alignment4->show();
   button2->show();
   image3->show();
   label3->show();
   hbox3->show();
   alignment3->show();
   button3->show();
   image6->show();
   label6->show();
   hbox6->show();
   alignment6->show();
   button4->show();
   image5->show();
   label5->show();
   hbox5->show();
   alignment5->show();
   button5->show();
   hbuttonbox1->show();
   vbox1->show();
   window1->show();
   button1->signal_clicked().connect(SigC::slot(*this, &window1_glade::add_one));
   button2->signal_clicked().connect(SigC::slot(*this, &window1_glade::eine_weg));
   button3->signal_clicked().connect(SigC::slot(*this, &window1_glade::refresh));
   button4->signal_clicked().connect(SigC::slot(*this, &window1_glade::change1));
   button5->signal_clicked().connect(SigC::slot(*this, &window1_glade::change2));
}

window1_glade::~window1_glade()
{  delete gmm_data;
}
