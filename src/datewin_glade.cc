// generated 2010/11/15 10:41:30 CET by christof@christof-hp.(none)
// using glademm V2.13.0
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- --noaccelerators widgets.glade
// for gtk 2.22.0 and gtkmm 2.20.3
//
// Please modify the corresponding derived classes in ./src/datewin.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
/*
 * Standard gettext macros.
 */
#ifdef ENABLE_NLS
#  include <libintl.h>
#  undef _
#  define _(String) dgettext (GETTEXT_PACKAGE, String)
#  ifdef gettext_noop
#    define N_(String) gettext_noop (String)
#  else
#    define N_(String) (String)
#  endif
#endif
#include <gtkmmconfig.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#include <sigc++/bind.h>
#define GMM_GTKMM_22_24(a,b) b
#else //gtkmm 2.2
#define GMM_GTKMM_22_24(a,b) a
#endif //
#include "datewin_glade.hh"
#include <gtkmm/adjustment.h>
#include <gtkmm/label.h>
#include <gtkmm/box.h>
#include <gtkmm/arrow.h>
#ifndef ENABLE_NLS
#  define textdomain(String) (String)
#  define gettext(String) (String)
#  define dgettext(Domain,Message) (Message)
#  define dcgettext(Domain,Message,Type) (Message)
#  define bindtextdomain(Domain,Directory) (Domain)
#  define _(String) (String)
#  define N_(String) (String)
#endif


datewin_glade::datewin_glade(
)
{  datewin = this;
   datum_label = Gtk::manage(new class Gtk::Label(""));
   
   Gtk::Adjustment *tag_adj = Gtk::manage(new class Gtk::Adjustment(1, 1, 31, 1, 7, 0));
   tag = Gtk::manage(new class Gtk::SpinButton(*tag_adj, 1, 0));
   
   Gtk::Label *label2 = Gtk::manage(new class Gtk::Label(_(".")));
   Gtk::Adjustment *monat_adj = Gtk::manage(new class Gtk::Adjustment(1, 1, 12, 1, 3, 0));
   monat = Gtk::manage(new class Gtk::SpinButton(*monat_adj, 1, 0));
   
   Gtk::Label *label3 = Gtk::manage(new class Gtk::Label(_(".")));
   Gtk::Adjustment *jahr_adj = Gtk::manage(new class Gtk::Adjustment(2002, 1800, 2100, 1, 10, 0));
   jahr = Gtk::manage(new class Gtk::SpinButton(*jahr_adj, 1, 0));
   
   Gtk::HBox *hbox9 = Gtk::manage(new class Gtk::HBox(false, 1));
   Gtk::Label *label22 = Gtk::manage(new class Gtk::Label(""));
   Gtk::Adjustment *kw_spinbutton_adj = Gtk::manage(new class Gtk::Adjustment(1, 1, 56, 1, 4, 0));
   kw_spinbutton = Gtk::manage(new class Gtk::SpinButton(*kw_spinbutton_adj, 1, 0));
   
   Gtk::Label *label18 = Gtk::manage(new class Gtk::Label(_("'")));
   Gtk::Adjustment *jahr_spinbutton_adj = Gtk::manage(new class Gtk::Adjustment(2005, 1900, 2099, 1, 10, 0));
   jahr_spinbutton = Gtk::manage(new class Gtk::SpinButton(*jahr_spinbutton_adj, 1, 0));
   
   Gtk::HBox *hbox13 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Label *label15 = Gtk::manage(new class Gtk::Label(""));
   Gtk::Label *label17 = Gtk::manage(new class Gtk::Label(_("Empty")));
   Gtk::Label *label16 = Gtk::manage(new class Gtk::Label(""));
   notebook = Gtk::manage(new class Gtk::Notebook());
   
   Gtk::Arrow *arrow1 = Gtk::manage(new class Gtk::Arrow(Gtk::ARROW_DOWN, Gtk::SHADOW_NONE));
   togglebutton_menu = Gtk::manage(new class Gtk::ToggleButton());
   tag->set_flags(Gtk::CAN_FOCUS);
   tag->set_update_policy(Gtk::UPDATE_ALWAYS);
   tag->set_numeric(true);
   tag->set_wrap(true);
   label2->set_justify(Gtk::JUSTIFY_CENTER);
   monat->set_flags(Gtk::CAN_FOCUS);
   monat->set_update_policy(Gtk::UPDATE_ALWAYS);
   monat->set_numeric(true);
   monat->set_wrap(true);
   label3->set_justify(Gtk::JUSTIFY_CENTER);
   jahr->set_flags(Gtk::CAN_FOCUS);
   jahr->set_update_policy(Gtk::UPDATE_ALWAYS);
   jahr->set_numeric(true);
   hbox9->set_border_width(1);
   hbox9->pack_start(*tag, Gtk::PACK_SHRINK, 0);
   hbox9->pack_start(*label2, Gtk::PACK_SHRINK, 0);
   hbox9->pack_start(*monat, Gtk::PACK_SHRINK, 0);
   hbox9->pack_start(*label3, Gtk::PACK_SHRINK, 0);
   hbox9->pack_start(*jahr, Gtk::PACK_SHRINK, 0);
   label22->set_justify(Gtk::JUSTIFY_CENTER);
   kw_spinbutton->set_flags(Gtk::CAN_FOCUS);
   kw_spinbutton->set_update_policy(Gtk::UPDATE_ALWAYS);
   jahr_spinbutton->set_flags(Gtk::CAN_FOCUS);
   jahr_spinbutton->set_update_policy(Gtk::UPDATE_ALWAYS);
   hbox13->pack_start(*kw_spinbutton);
   hbox13->pack_start(*label18, Gtk::PACK_SHRINK, 0);
   hbox13->pack_start(*jahr_spinbutton);
   notebook->set_show_tabs(false);
   notebook->set_show_border(false);
   notebook->set_tab_pos(Gtk::POS_BOTTOM);
   notebook->append_page(*hbox9, *label22);
   notebook->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   notebook->append_page(*hbox13, *label15);
   notebook->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   notebook->append_page(*label17, *label16);
   notebook->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   togglebutton_menu->set_flags(Gtk::CAN_FOCUS);
   togglebutton_menu->add(*arrow1);
   datewin->pack_start(*datum_label, Gtk::PACK_SHRINK, 0);
   datewin->pack_start(*notebook, Gtk::PACK_SHRINK, 0);
   datewin->pack_start(*togglebutton_menu, Gtk::PACK_SHRINK, 0);
   datum_label->show();
   tag->show();
   label2->show();
   monat->show();
   label3->show();
   jahr->show();
   hbox9->show();
   label22->show();
   kw_spinbutton->show();
   label18->show();
   jahr_spinbutton->show();
   hbox13->show();
   label15->show();
   label17->show();
   label16->show();
   notebook->show();
   arrow1->show();
   togglebutton_menu->show();
   datewin->show();
   tag->signal_activate().connect(sigc::mem_fun(*this, &datewin_glade::on_tag_activate), true);
   monat->signal_activate().connect(sigc::mem_fun(*this, &datewin_glade::on_monat_activate), true);
   jahr->signal_activate().connect(sigc::mem_fun(*this, &datewin_glade::datum_activate), true);
   kw_spinbutton->signal_activate().connect(sigc::mem_fun(*jahr_spinbutton, &Gtk::Widget::grab_focus), true);
   jahr_spinbutton->signal_activate().connect(sigc::mem_fun(*this, &datewin_glade::kw_activate), true);
   togglebutton_menu->signal_toggled().connect(sigc::mem_fun(*this, &datewin_glade::on_togglebutton_menu_toggled), true);
}

datewin_glade::~datewin_glade()
{  
}
