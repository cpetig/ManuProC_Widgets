// generated 2004/9/13 10:59:20 CEST by christof@puck.petig-baender.de
// using glademm V2.6.0_cvs
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- --noaccelerators Komponenten.glade
// for gtk 2.4.9 and gtkmm 2.4.5
//
// Please modify the corresponding derived classes in ././IntStringBox.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
#include <gtkmmconfig.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#include <sigc++/compatibility.h>
#define GMM_GTKMM_22_24(a,b) b
#else //gtkmm 2.2
#define GMM_GTKMM_22_24(a,b) a
#endif //
#include "IntStringBox_glade.hh"
#include <gtkmm/button.h>
#include <gtkmm/table.h>

IntStringBox_glade::IntStringBox_glade(
)
{  
   
   Gtk::EventBox *IntStringBox = this;
   label_int = Gtk::manage(new class Gtk::Label("Int"));
   label_string1 = Gtk::manage(new class Gtk::Label("Name1"));
   label_string2 = Gtk::manage(new class Gtk::Label("Name2"));
   sc_int = new class SearchCombo();
   sc1_string = new class SearchCombo();
   sc2_string = new class SearchCombo();
   
   Gtk::Button *button3 = Gtk::manage(new class Gtk::Button("leeren"));
   Gtk::Table *table = Gtk::manage(new class Gtk::Table(2, 2, false));
   label_int->set_alignment(0,0.5);
   label_int->set_padding(0,0);
   label_int->set_justify(Gtk::JUSTIFY_CENTER);
   label_int->set_line_wrap(false);
   label_int->set_use_markup(false);
   label_int->set_selectable(false);
   label_string1->set_alignment(0,0.5);
   label_string1->set_padding(0,0);
   label_string1->set_justify(Gtk::JUSTIFY_CENTER);
   label_string1->set_line_wrap(false);
   label_string1->set_use_markup(false);
   label_string1->set_selectable(false);
   label_string2->set_alignment(0,0.5);
   label_string2->set_padding(0,0);
   label_string2->set_justify(Gtk::JUSTIFY_CENTER);
   label_string2->set_line_wrap(false);
   label_string2->set_use_markup(false);
   label_string2->set_selectable(false);
   button3->set_flags(Gtk::CAN_FOCUS);
   button3->set_relief(Gtk::RELIEF_NORMAL);
   table->set_row_spacings(0);
   table->set_col_spacings(0);
   table->attach(*label_int, 1, 2, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table->attach(*label_string1, 2, 3, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table->attach(*label_string2, 3, 4, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table->attach(*sc_int, 1, 2, 1, 2, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table->attach(*sc1_string, 2, 3, 1, 2, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table->attach(*sc2_string, 3, 4, 1, 2, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table->attach(*button3, 0, 1, 1, 2, Gtk::AttachOptions(), Gtk::AttachOptions(), 0, 0);
   IntStringBox->set_events(Gdk::BUTTON_PRESS_MASK);
   IntStringBox->add(*table);
   label_int->show();
   label_string1->show();
   label_string2->show();
   sc_int->show();
   sc1_string->show();
   sc2_string->show();
   button3->show();
   table->show();
   IntStringBox->show();
   sc_int->signal_activate().connect(SigC::slot(*this, &IntStringBox_glade::int_activate));
   sc_int->signal_search().connect(SigC::slot(*this, &IntStringBox_glade::int_search), false);
   sc1_string->signal_activate().connect(SigC::slot(*this, &IntStringBox_glade::string1_activate));
   sc1_string->signal_search().connect(SigC::slot(*this, &IntStringBox_glade::string1_search), false);
   sc2_string->signal_activate().connect(SigC::slot(*this, &IntStringBox_glade::string2_activate));
   sc2_string->signal_search().connect(SigC::slot(*this, &IntStringBox_glade::string2_search), false);
   button3->signal_clicked().connect(SigC::slot(*this, &IntStringBox_glade::reset), false);
   table->signal_button_press_event().connect(SigC::slot(*this, &IntStringBox_glade::MouseButton), false);
}

IntStringBox_glade::~IntStringBox_glade()
{  delete sc_int;
   delete sc1_string;
   delete sc2_string;
}
